#include "ImageClip.h"

#include "UtilLog.h"
#include "VideoCompositionParameters.h"

namespace model {

//////////////////////////////////////////////////////////////////////////
// INITIALIZATION
//////////////////////////////////////////////////////////////////////////

ImageClip::ImageClip()
    : VideoClip()
{
    VAR_DEBUG(*this);
}

ImageClip::ImageClip(VideoFilePtr file)
    : VideoClip(file)
{
    VAR_DEBUG(*this);
}

ImageClip::ImageClip(const ImageClip& other)
    : VideoClip(other)
{
    VAR_DEBUG(*this)(other);
}

ImageClip* ImageClip::clone() const
{
    return new ImageClip(static_cast<const ImageClip&>(*this));
}

ImageClip::~ImageClip()
{
    VAR_DEBUG(this);
}

//////////////////////////////////////////////////////////////////////////
// ICONTROL
//////////////////////////////////////////////////////////////////////////

void ImageClip::clean()
{
    VAR_DEBUG(this);
    VideoClip::clean();
}

//////////////////////////////////////////////////////////////////////////
// ICLIP
//////////////////////////////////////////////////////////////////////////

std::ostream& ImageClip::dump(std::ostream& os) const
{
    os << *this; // todo
    return os;
}

//////////////////////////////////////////////////////////////////////////
// IVIDEO
//////////////////////////////////////////////////////////////////////////

VideoFramePtr ImageClip::getNextVideo(const VideoCompositionParameters& parameters)
{
    return VideoClip::getNextVideo(parameters); // todo
}

//////////////////////////////////////////////////////////////////////////
// GET/SET
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// HELPER METHODS
//////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// LOGGING
//////////////////////////////////////////////////////////////////////////

std::ostream& operator<<( std::ostream& os, const ImageClip& obj )
{
    os << static_cast<const VideoClip&>(obj);
    return os;
}

//////////////////////////////////////////////////////////////////////////
// SERIALIZATION
//////////////////////////////////////////////////////////////////////////

template<class Archive>
void ImageClip::serialize(Archive & ar, const unsigned int version)
{
    ar & boost::serialization::base_object<VideoClip>(*this);
}
template void ImageClip::serialize<boost::archive::text_oarchive>(boost::archive::text_oarchive& ar, const unsigned int archiveVersion);
template void ImageClip::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive& ar, const unsigned int archiveVersion);

} //namespace