#ifndef TRIM_EVENT_H
#define TRIM_EVENT_H

#include "UtilEvent.h"
#include "UtilInt.h"

namespace gui { namespace timeline {

class TrimEvent
{
public:

    //////////////////////////////////////////////////////////////////////////
    // INITIALIZATION
    //////////////////////////////////////////////////////////////////////////

    explicit TrimEvent(bool active, pts oldLength = 0, pts newLength = 0, wxString description = "");

    //////////////////////////////////////////////////////////////////////////
    // GET/SET
    //////////////////////////////////////////////////////////////////////////

    bool getActive() const;
    pts getOldLength() const;
    pts getNewLength() const;
    wxString getDescription() const;

private:

    //////////////////////////////////////////////////////////////////////////
    // MEMBERS
    //////////////////////////////////////////////////////////////////////////

    bool mActive;
    pts mOldLength;
    pts mNewLength;
    wxString mDescription;

    //////////////////////////////////////////////////////////////////////////
    // LOGGING
    //////////////////////////////////////////////////////////////////////////

    friend std::ostream& operator<<( std::ostream& os, const TrimEvent& obj );
};

DECLARE_EVENT(EVENT_TRIM_UPDATE, EventTrimUpdate, TrimEvent);

}} // namespace

#endif // TRIM_EVENT_H