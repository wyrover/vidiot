#ifndef MODEL_CLIP_H
#define MODEL_CLIP_H

#include "IControl.h"
#include "UtilLogGeneric.h"

namespace model {

class Clip 
    :   public IControl
    //,   public ILoggable // todo move to base classes
{
public:

    //////////////////////////////////////////////////////////////////////////
    // INITIALIZATION
    //////////////////////////////////////////////////////////////////////////

    Clip();

    Clip(IControlPtr clip);

    Clip(const Clip& other);

    virtual Clip* clone();

    virtual ~Clip();

    //////////////////////////////////////////////////////////////////////////
    // ICONTROL
    //////////////////////////////////////////////////////////////////////////

    virtual boost::int64_t getNumberOfFrames();
    virtual void moveTo(boost::int64_t position);

    //////////////////////////////////////////////////////////////////////////
    // LINK
    //////////////////////////////////////////////////////////////////////////

    void setLink(ClipPtr link);
    ClipPtr getLink() const;

    //////////////////////////////////////////////////////////////////////////
    // FOR DETERMINING THE TYPE OF CLIP
    //////////////////////////////////////////////////////////////////////////

    template <typename Derived>
    bool isA()
    {
        return (typeid(Derived) == typeid(*this));
    }

    //////////////////////////////////////////////////////////////////////////
    // GET/SET
    //////////////////////////////////////////////////////////////////////////

    boost::int64_t getOffset();
    void setOffset(boost::int64_t offset);

    void setLength(boost::int64_t length);

protected:

    //////////////////////////////////////////////////////////////////////////
    // MEMBERS
    //////////////////////////////////////////////////////////////////////////

    IControlPtr mRender;
    ClipPtr mLink;

private:

    boost::int64_t mOffset;
    boost::int64_t mLength;

    //////////////////////////////////////////////////////////////////////////
    // LOGGING
    //////////////////////////////////////////////////////////////////////////

    friend std::ostream& operator<<( std::ostream& os, const Clip& obj );

    //////////////////////////////////////////////////////////////////////////
    // SERIALIZATION 
    //////////////////////////////////////////////////////////////////////////

    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version);
};

} // namespace

BOOST_CLASS_VERSION(model::Clip, 1)
BOOST_CLASS_EXPORT(model::Clip)

#endif // MODEL_CLIP_H
